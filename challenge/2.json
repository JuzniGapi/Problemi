{
  "id": 2,
  "description": "Napiši funkcijo `max_tocke(matrika: list[list[int]]) -> int`, ki vrne maksimalno število točk, ki jih lahko zbereš v 2D matriki velikosti N x N, če začneš v zgornjem levem kotu (0, 0) in končaš v spodnjem desnem kotu (N-1, N-1). Gibaš se lahko samo **desno**, **dol** ali **diagonalno desno-dol** (v smeri (1,1)). Na vsakem polju zbereš točke, ki so zapisane v matriki.",
  "function_signature": "def max_tocke(matrika: list[list[int]]) -> int:",
  "input_format": "Matrika je seznam seznamov celih števil (velikost 1 ≤ N ≤ 50).",
  "output_format": "Vrni maksimalno število točk.",
  "constraints": [
    "Matrika je kvadratna (N x N).",
    "Točke so nenegativna cela števila (0 ≤ matrika[i][j] ≤ 100)."
  ],
  "examples": [
    {
      "input": "matrika = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
      "output": "29",
      "explanation": "Optimalna pot: 1 → 4 → 7 → 8 → 9 (1+4+7+8+9 = 29)."
    },
    {
      "input": "matrika = [[3, 0, 2], [1, 4, 1], [5, 2, 1]]",
      "output": "12",
      "explanation": "Optimalna pot: 3 → 1 → 5 → 2 → 1 (3+1+5+2+1 = 12)."
    }
  ],
  "solution": "def max_tocke(matrika: list[list[int]]) -> int:\n    n = len(matrika)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrika[0][0]\n    \n    # Zapolnimo prvo vrstico in prvi stolpec\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrika[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrika[0][j]\n    \n    # Dinamično programiranje za preostale celice\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrika[i][j] + max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[n-1][n-1]"
}
